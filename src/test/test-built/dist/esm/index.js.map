{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["//{{HEADER COMMENT START}}\n// This file is automatically generated, edits will be lost on rebuild\n//{{HEADER COMMENT END}}\n\nimport {\n  parseTestArgs,\n  PromiseWithSubtest,\n  TapPlugin,\n  TestArgs,\n  TestBase,\n  TestBaseOpts,\n} from '@tapjs/core'\n\n//{{PLUGIN IMPORT START}}\nimport * as Plugin_after from \"@tapjs/after\"\nimport * as Plugin_afterEach from \"@tapjs/after-each\"\nimport * as Plugin_asserts from \"@tapjs/asserts\"\nimport * as Plugin_before from \"@tapjs/before\"\nimport * as Plugin_beforeEach from \"@tapjs/before-each\"\nimport * as Plugin_chdir from \"@tapjs/chdir\"\nimport * as Plugin_filter from \"@tapjs/filter\"\nimport * as Plugin_fixture from \"@tapjs/fixture\"\nimport * as Plugin_intercept from \"@tapjs/intercept\"\nimport * as Plugin_mock from \"@tapjs/mock\"\nimport * as Plugin_nodeSerialize from \"@tapjs/node-serialize\"\nimport * as Plugin_snapshot from \"@tapjs/snapshot\"\nimport * as Plugin_spawn from \"@tapjs/spawn\"\nimport * as Plugin_stdin from \"@tapjs/stdin\"\nimport * as Plugin_typescript from \"@tapjs/typescript\"\nimport * as Plugin_worker from \"@tapjs/worker\"\n//{{PLUGIN IMPORT END}}\n\nimport type {\n  ConfigSet,\n  ConfigSetFromMetaSet,\n  Jack,\n  ValidValue,\n} from 'jackspeak'\nimport { isConfigOption } from 'jackspeak'\nimport { inspect } from 'node:util'\n\n/**\n * The set of file extensions that the tap runner will load\n * by default. Expaned into the `include` config values if they\n * contain the token `__EXTENSIONS__`.\n *\n * If plugins export a `testFileExtensions` string array, then the\n * entries will be added to this set.\n */\nexport const testFileExtensions = new Set(['js', 'cjs', 'mjs', 'tap'])\n//{{FILE TYPES START}}\ntestFileExtensions.add(\"cts\")\ntestFileExtensions.add(\"jsx\")\ntestFileExtensions.add(\"mts\")\ntestFileExtensions.add(\"ts\")\ntestFileExtensions.add(\"tsx\")\n//{{FILE TYPES END}}\n\nconst kInspect = Symbol.for('nodejs.util.inspect.custom')\nconst copyInspect = (v: Function) => ({\n  [kInspect]: (...args: any[]) => inspect(v, ...args),\n})\n\nconst copyToString = (v: Function) => ({\n  toString: Object.assign(() => v.toString(), {\n    toString: () => 'function toString() { [native code] }',\n  }),\n})\nconst copyFunction = <\n  Ext extends BuiltPlugins,\n  Opts extends TestOpts,\n>(\n  t: Test<Ext, Opts>,\n  plug: Plug<Opts>,\n  v: Function,\n) => {\n  const f: (this: Plug<Opts>, ...args: any) => any = function (\n    ...args: any[]\n  ) {\n    // if you do `const { method } = t` then calling `method` will\n    // call it on the plugin that provided it.\n    // So no need to pre-bind anything, really.\n    const thisArg = this === t || this === undefined ? plug : this\n    const ret = v.apply(thisArg, args)\n    // If a plugin method returns 'this', and it's the plugin,\n    // then we return the extended Test instead.\n    return ret === thisArg && thisArg === plug ? t : ret\n  }\n  const vv = Object.assign(\n    Object.assign(f, v),\n    copyToString(v),\n    copyInspect(v),\n  )\n  vv.prototype = v.prototype\n  const nameProp = Reflect.getOwnPropertyDescriptor(v, 'name')\n  if (nameProp) {\n    Reflect.defineProperty(f, 'name', nameProp)\n  }\n\n  return vv\n}\n\n/**\n * Utility type to combine the array of plugins into a single combined\n * return type.\n */\nexport type PluginResult<\n  P extends ((t: TestBase, opts: any) => any)[],\n> =\n  P extends (\n    [\n      infer H extends (t: TestBase, opts: any) => any,\n      ...infer T extends ((t: TestBase, opts: any) => any)[],\n    ]\n  ) ?\n    ReturnType<H> & PluginResult<T>\n  : {}\n\n/**\n * The union of return types of an array of functions\n */\ntype AnyReturnValue<A extends ((...a: any[]) => any)[]> =\n  A extends (\n    [\n      infer H extends (...a: any[]) => any,\n      ...infer T extends ((...a: any[]) => any)[],\n    ]\n  ) ?\n    ReturnType<H> | AnyReturnValue<T>\n  : never\n\ntype Plug<Opt extends TestOpts> =\n  | TestBase\n  | {\n      t: Test<BuiltPlugins>\n      pluginLoaded<T extends any = any>(\n        plugin: (t: any, opts?: any) => T,\n      ): boolean\n      plugins: TapPlugin<any, Opt>[]\n    }\n  | AnyReturnValue<PluginSet>\ntype Plugged = TestBase & {\n  t: Test<BuiltPlugins>\n} & BuiltPlugins\ntype PlugKeys = keyof Plugged\n\n/**\n * Utility type to get the second parameter of a function, used to\n * get the types of all plugin options.\n */\nexport type SecondParam<T extends [any] | [any, any]> =\n  T extends [any, infer S] ? S : unknown\n\n/**\n * The union of the second parameters of all loaded plugin methods\n */\nexport type PluginOpts<\n  P extends ((t: TestBase, opts: any) => any)[],\n> =\n  P extends (\n    [\n      infer H extends (t: TestBase, opts: any) => any,\n      ...infer T extends ((t: TestBase, opts: any) => any)[],\n    ]\n  ) ?\n    SecondParam<Parameters<H>> & PluginOpts<T>\n  : {}\n\n/**\n * Options that may be provided to `t.test()`. Extends\n * {@link @tapjs/core!index.Extra}, {@link @tapjs/core!base.BaseOpts},\n * {@link @tapjs/core!test-base.TestBaseOpts}, and the second argument to all\n * plugin methods currently in use.\n */\nexport type TestOpts = TestBaseOpts & PluginOpts<PluginSet>\n\nlet plugins_: PluginSet\n\n/**\n * Type that is the array of all plugin functions loaded\n */\n//{{PLUGINS CODE START}}\n// export type PluginSet = (\n//   | TapPlugin<any>\n//   | TapPlugin<any, TestBaseOpts>\n// )[]\n// const plugins = () => {\n//   if (plugins_) return plugins_\n//   return (plugins_ = [])\n// }\nexport type PluginSet = [\n  typeof Plugin_after.plugin,\n  typeof Plugin_afterEach.plugin,\n  typeof Plugin_asserts.plugin,\n  typeof Plugin_before.plugin,\n  typeof Plugin_beforeEach.plugin,\n  typeof Plugin_chdir.plugin,\n  typeof Plugin_filter.plugin,\n  typeof Plugin_fixture.plugin,\n  typeof Plugin_intercept.plugin,\n  typeof Plugin_mock.plugin,\n  typeof Plugin_nodeSerialize.plugin,\n  typeof Plugin_snapshot.plugin,\n  typeof Plugin_spawn.plugin,\n  typeof Plugin_stdin.plugin,\n  typeof Plugin_typescript.plugin,\n  typeof Plugin_worker.plugin,\n]\n\nconst plugins = () => {\n  if (plugins_) return plugins_\n  return (plugins_ = [\n    Plugin_after.plugin,\n    Plugin_afterEach.plugin,\n    Plugin_asserts.plugin,\n    Plugin_before.plugin,\n    Plugin_beforeEach.plugin,\n    Plugin_chdir.plugin,\n    Plugin_filter.plugin,\n    Plugin_fixture.plugin,\n    Plugin_intercept.plugin,\n    Plugin_mock.plugin,\n    Plugin_nodeSerialize.plugin,\n    Plugin_snapshot.plugin,\n    Plugin_spawn.plugin,\n    Plugin_stdin.plugin,\n    Plugin_typescript.plugin,\n    Plugin_worker.plugin,\n  ])\n}\n//{{PLUGINS CODE END}}\n\n/**\n * The combined configuration object generated by the `config`\n * objects exported by plugins.\n */\n//{{PLUGINS CONFIG START}}\n// // just referenced to keep prettier/tslint happy\n// /* c8 ignore start */\n// isConfigOption\n// const c = <T extends ConfigSet>(j: Jack<T>) => j\n// const cs = c as unknown as ValidValue &\n//   ConfigSetFromMetaSet<'boolean', false, { x: {} }>\n// c\n// cs\n// /* c8 ignore stop */\nexport const execArgv = (\n  values: ReturnType<ReturnType<typeof config>['parse']>['values']\n) => {\n  const argv = []\n  const config_Plugin_filter_0 = Plugin_filter.config[\"only\"]\n  const config_Plugin_filter_0_value = values[\"only\"]\n  const config_Plugin_filter_1 = Plugin_filter.config[\"grep\"]\n  const config_Plugin_filter_1_value = values[\"grep\"]\n  if (config_Plugin_filter_0_value !== undefined) {\n    argv.push(...config_Plugin_filter_0.nodeArgs(config_Plugin_filter_0_value))\n  }\n  if (config_Plugin_filter_1_value !== undefined) {\n    argv.push(...config_Plugin_filter_1.nodeArgs(config_Plugin_filter_1_value))\n  }\n  return argv\n}\n\nexport const config = <C extends ConfigSet>(jack: Jack<C>) => {\n  const config_Plugin_filter_0 = Plugin_filter.config[\"only\"]\n  if (!isConfigOption(config_Plugin_filter_0, \"boolean\", false)) {\n    throw new Error(\"Invalid config option 'only' defined in plugin: '@tapjs/filter'\")\n  }\n  const config_Plugin_filter_1 = Plugin_filter.config[\"grep\"]\n  if (!isConfigOption(config_Plugin_filter_1, \"string\", true)) {\n    throw new Error(\"Invalid config option 'grep' defined in plugin: '@tapjs/filter'\")\n  }\n  const config_Plugin_filter_2 = Plugin_filter.config[\"invert\"]\n  if (!isConfigOption(config_Plugin_filter_2, \"boolean\", false)) {\n    throw new Error(\"Invalid config option 'invert' defined in plugin: '@tapjs/filter'\")\n  }\n  const config_Plugin_filter_3 = Plugin_filter.config[\"no-invert\"]\n  if (!isConfigOption(config_Plugin_filter_3, \"boolean\", false)) {\n    throw new Error(\"Invalid config option 'no-invert' defined in plugin: '@tapjs/filter'\")\n  }\n  const config_Plugin_filter_4 = Plugin_filter.config[\"filter-quietly\"]\n  if (!isConfigOption(config_Plugin_filter_4, \"boolean\", false)) {\n    throw new Error(\"Invalid config option 'filter-quietly' defined in plugin: '@tapjs/filter'\")\n  }\n  const config_Plugin_filter_5 = Plugin_filter.config[\"no-filter-quietly\"]\n  if (!isConfigOption(config_Plugin_filter_5, \"boolean\", false)) {\n    throw new Error(\"Invalid config option 'no-filter-quietly' defined in plugin: '@tapjs/filter'\")\n  }\n  const config_Plugin_fixture_0 = Plugin_fixture.config[\"save-fixture\"]\n  if (!isConfigOption(config_Plugin_fixture_0, \"boolean\", false)) {\n    throw new Error(\"Invalid config option 'save-fixture' defined in plugin: '@tapjs/fixture'\")\n  }\n  const config_Plugin_snapshot_0 = Plugin_snapshot.config[\"snapshot\"]\n  if (!isConfigOption(config_Plugin_snapshot_0, \"boolean\", false)) {\n    throw new Error(\"Invalid config option 'snapshot' defined in plugin: '@tapjs/snapshot'\")\n  }\n  const config_Plugin_snapshot_1 = Plugin_snapshot.config[\"snapshot-clean-cwd\"]\n  if (!isConfigOption(config_Plugin_snapshot_1, \"boolean\", false)) {\n    throw new Error(\"Invalid config option 'snapshot-clean-cwd' defined in plugin: '@tapjs/snapshot'\")\n  }\n  const config_Plugin_snapshot_2 = Plugin_snapshot.config[\"no-snapshot-clean-cwd\"]\n  if (!isConfigOption(config_Plugin_snapshot_2, \"boolean\", false)) {\n    throw new Error(\"Invalid config option 'no-snapshot-clean-cwd' defined in plugin: '@tapjs/snapshot'\")\n  }\n  const config_Plugin_typescript_0 = Plugin_typescript.config[\"typecheck\"]\n  if (!isConfigOption(config_Plugin_typescript_0, \"boolean\", false)) {\n    throw new Error(\"Invalid config option 'typecheck' defined in plugin: '@tapjs/typescript'\")\n  }\n  const config_Plugin_typescript_1 = Plugin_typescript.config[\"tsconfig\"]\n  if (!isConfigOption(config_Plugin_typescript_1, \"string\", false)) {\n    throw new Error(\"Invalid config option 'tsconfig' defined in plugin: '@tapjs/typescript'\")\n  }\n  const config_Plugin_typescript_2 = Plugin_typescript.config[\"type-strip-only\"]\n  if (!isConfigOption(config_Plugin_typescript_2, \"boolean\", false)) {\n    throw new Error(\"Invalid config option 'type-strip-only' defined in plugin: '@tapjs/typescript'\")\n  }\n  return jack\n    .heading(\"From plugin: @tapjs/filter\")\n    .flag({ \"only\": config_Plugin_filter_0 })\n    .optList({ \"grep\": config_Plugin_filter_1 })\n    .flag({ \"invert\": config_Plugin_filter_2 })\n    .flag({ \"no-invert\": config_Plugin_filter_3 })\n    .flag({ \"filter-quietly\": config_Plugin_filter_4 })\n    .flag({ \"no-filter-quietly\": config_Plugin_filter_5 })\n    .heading(\"From plugin: @tapjs/fixture\")\n    .flag({ \"save-fixture\": config_Plugin_fixture_0 })\n    .heading(\"From plugin: @tapjs/snapshot\")\n    .flag({ \"snapshot\": config_Plugin_snapshot_0 })\n    .flag({ \"snapshot-clean-cwd\": config_Plugin_snapshot_1 })\n    .flag({ \"no-snapshot-clean-cwd\": config_Plugin_snapshot_2 })\n    .heading(\"From plugin: @tapjs/typescript\")\n    .flag({ \"typecheck\": config_Plugin_typescript_0 })\n    .opt({ \"tsconfig\": config_Plugin_typescript_1 })\n    .flag({ \"type-strip-only\": config_Plugin_typescript_2 })\n}\n//{{PLUGINS CONFIG END}}\n\n//{{LOADERS START}}\n// // these are always added with --loader\n// export const loaders = []\n// // these are added with --import, if available\n// export const importLoaders = []\n// // these are added with --loader, only if --import is unavailable\n// export const loaderFallbacks = []\nconst preloaders = new Set<string>([\n  \"@tapjs/typescript/esm\"\n])\n\nconst preimports = new Set<string>([\n  \"@tapjs/typescript/import\"\n])\n\n/**\n * The set of `loader` strings exported by plugins. If a plugin exports\n * `preload = true`, then it will be sorted to the start of this list, so\n * that Node loads it before other loaders.\n */\nexport const loaders: string[] = [].sort(\n  (a, b) => preloaders.has(a) && !preloaders.has(b) ? -1\n    : !preloaders.has(a) && preloaders.has(b) ? 1\n    : 0\n)\n\n/**\n * The set of `importLoader` strings exported by plugins, for use with\n * `Module.register` in node v20.6 and higher.\n */\nexport const importLoaders: string[] = [\n  \"@tapjs/mock/import\",\n  \"@tapjs/typescript/import\"\n].sort(\n  (a, b) => preimports.has(a) && !preimports.has(b) ? -1\n    : !preimports.has(a) && preimports.has(b) ? 1\n    : 0\n)\n\n/**\n * All `loader` strings exported by plugins, including fallbacks provided\n * for those that also export an `importLoader`\n */\nexport const loaderFallbacks: string[] = [\n  \"@tapjs/mock/loader\",\n  \"@tapjs/typescript/esm\"\n].sort(\n  (a, b) => preloaders.has(a) && !preloaders.has(b) ? -1\n    : !preloaders.has(a) && preloaders.has(b) ? 1\n    : 0\n)\n\n//{{LOADERS END}}\n\n/**\n * The string signature that lists all loaded plugins alphabetically, used\n * to determine whether a rebuild is necessary by comparing it to the `plugin`\n * config value.\n */\n//{{PLUGIN SIGNATURE START}}\n// export const signature = ''\nexport const signature = `@tapjs/after\n@tapjs/after-each\n@tapjs/asserts\n@tapjs/before\n@tapjs/before-each\n@tapjs/chdir\n@tapjs/filter\n@tapjs/fixture\n@tapjs/intercept\n@tapjs/mock\n@tapjs/node-serialize\n@tapjs/snapshot\n@tapjs/spawn\n@tapjs/stdin\n@tapjs/typescript\n@tapjs/worker`\n//{{PLUGIN SIGNATURE END}}\n\n/**\n * Union of {@link @tapjs/core!test-base.TestBase} plus all plugin\n * return values\n */\nexport type TTest<P extends PluginSet = PluginSet> = TestBase &\n  PluginResult<P>\n\n/**\n * Interface that is the assembled result of every loaded plugin.\n *\n * This is extended into an interface because otherwise the code\n * hinting is overwhelmingly extravagant.\n */\nexport interface BuiltPlugins extends PluginResult<PluginSet> {}\n\nconst applyPlugins = <\n  Ext extends BuiltPlugins,\n  Opts extends TestOpts,\n>(\n  base: Test<Ext, Opts>,\n  plugs: (TapPlugin<any, Opts> | TapPlugin<any>)[] = plugins() as (\n    | TapPlugin<any>\n    | TapPlugin<any, Opts>\n  )[],\n): Test<Ext, Opts> & Ext => {\n  const ext: Plug<Opts>[] = plugs\n    // typecast in case we have *only* option-less plugins.\n    .map(p =>\n      (p as TapPlugin<Plug<Opts>, TestBaseOpts>)(base, base.options),\n    )\n    .concat(base)\n  const getCache = new Map<any, any>()\n  // extend the proxy with Object.create, and then set the toStringTag\n  // to 'Test', so we don't get stack frames like `Proxy.<anonymous>`\n  const t = Object.create(\n    new Proxy(base, {\n      has(_, p) {\n        for (const t of ext) {\n          if (Reflect.has(t, p)) return true\n        }\n        return false\n      },\n      ownKeys() {\n        const k: PlugKeys[] = []\n        for (const t of ext) {\n          const keys = Reflect.ownKeys(t) as PlugKeys[]\n          k.push(...keys)\n        }\n        return [...new Set(k)]\n      },\n      set(_, p, v) {\n        // check to see if there's any setters, and if so, set it there\n        // otherwise, just set on the base\n        let didSet = false\n        if (getCache.has(p)) getCache.delete(p)\n        for (const t of ext) {\n          let o: Object | null = t\n          while (o) {\n            // assign to the all plugs that can receive it\n            const prop = Reflect.getOwnPropertyDescriptor(o, p)\n            if (prop) {\n              if (prop.set || prop.writable) {\n                //@ts-ignore\n                t[p] = v\n                didSet = true\n              }\n              break\n            }\n            o = Reflect.getPrototypeOf(o)\n          }\n        }\n        if (!didSet) {\n          // if nothing has that field, assign to the base\n          //@ts-ignore\n          base[p] = v\n        }\n        return true\n      },\n      get(_, p) {\n        if (p === 'parent') {\n          return base.parent?.t\n        }\n        // cache get results so t.blah === t.blah\n        // we only cache functions, so that getters aren't memoized\n        // Of course, a getter that returns a function will be broken,\n        // at least when accessed from outside the plugin, but that's\n        // a pretty narrow caveat, and easily documented.\n        if (getCache.has(p)) return getCache.get(p)\n        for (const plug of ext) {\n          if (p in plug) {\n            //@ts-ignore\n            const v = plug[p]\n            // Functions need special handling so that they report\n            // the correct toString and are called on the correct object\n            // Otherwise attempting to access #private props will fail.\n            if (typeof v === 'function') {\n              if (getCache.has(v)) return getCache.get(v)\n              const vv: Function = copyFunction<Ext, Opts>(t, plug, v)\n              getCache.set(p, vv)\n              // aliases remain aliases\n              getCache.set(v, vv)\n              return vv\n            } else {\n              return v\n            }\n          }\n        }\n      },\n    }),\n  )\n\n  // assign a reference to the extended Test for use in plugin at run-time\n  Object.assign(base, { t })\n  // put the .t self-ref and plugin inspection on top of the stack\n  const top = {\n    t,\n    get pluginLoaded() {\n      return <T extends any = any>(\n        plugin: (t: any, opts?: any) => T,\n      ) => {\n        return plugs.includes(plugin)\n      }\n    },\n    get plugins() {\n      return [...plugs]\n    },\n  }\n  ext.unshift(top)\n\n  //@ts-ignore\n  const tst: string = base[Symbol.toStringTag]\n  Object.defineProperty(t, Symbol.toStringTag, {\n    value: tst,\n    configurable: true,\n  })\n  Object.defineProperty(top, Symbol.toStringTag, {\n    value: tst,\n    configurable: true,\n  })\n  return t\n}\n\nconst kPluginSet = Symbol('@tapjs/test construction plugin set')\nconst kClass = Symbol('@tapjs/test construction class')\n/**\n * Option object used when extending the `Test` class via\n * {@link @tapjs/test!index.Test.applyPlugin}\n *\n * @internal\n */\nexport type PluginExtensionOption<\n  E extends BuiltPlugins = BuiltPlugins,\n  O extends TestOpts = TestOpts,\n> = {\n  [kPluginSet]: TapPlugin<any, O>[]\n  [kClass]?: typeof Test<E, O>\n}\n\n/**\n * interface defining the fully extended {@link @tapjs/test!index.Test} class.\n */\nexport interface Test<\n  Ext extends BuiltPlugins = BuiltPlugins,\n  Opts extends TestOpts = TestOpts,\n> extends TTest {\n  /**\n   * Explicitly mark the test as completed, outputting the TAP plan line if\n   * needed.\n   *\n   * This is not required to be called if the test function returns a promise,\n   * or if a plan is explicitly declared and eventually fulfilled.\n   *\n   * @group Test Lifecycle Management\n   */\n  end(): this\n  /**\n   * Specify the number of Test Points expected by this test.\n   * Outputs a TAP plan line.\n   *\n   * @group Test Lifecycle Management\n   */\n  plan(n: number, comment?: string): void\n}\n\n/**\n * This is the class that is extended for the root {@link @tapjs/core!tap.TAP}\n * test, and used to instantiate test objects in its child tests. It extends\n * {@link @tapjs/core!test-base.TestBase}, and implements the union of return\n * values of all loaded plugins via a Proxy.\n */\nexport class Test<\n    Ext extends BuiltPlugins = BuiltPlugins,\n    Opts extends TestOpts = TestOpts,\n  >\n  extends TestBase\n  implements TTest\n{\n  #Class: typeof Test<Ext, Opts>\n  #pluginSet: TapPlugin<any, Opts>[]\n\n  /**\n   * @param opts Test options for this instance\n   *\n   * @param __INTERNAL Extension option used by the subclasses created in\n   * {@link @tapjs/test!index.Test#applyPlugin}.\n   *\n   * @internal\n   */\n  constructor(\n    opts: Opts,\n    __INTERNAL: PluginExtensionOption<Ext, Opts> = {\n      [kPluginSet]: plugins() as TapPlugin<any, Opts>[],\n      [kClass]: Test,\n    },\n  ) {\n    super(opts)\n    this.#Class = __INTERNAL[kClass] as typeof Test<Ext, Opts>\n    const pluginSet = __INTERNAL[kPluginSet]\n    this.#pluginSet = pluginSet\n    type T = Test<Ext, Opts> & Ext\n    // need to ignore this because it's a ctor that returns a value.\n    /* c8 ignore start */\n    return applyPlugins(this, pluginSet) as T\n  }\n  /* c8 ignore stop */\n\n  /**\n   * The string signature of the plugins built into this Test class\n   */\n  get pluginSignature() {\n    return signature\n  }\n\n  /**\n   * Add a plugin at run-time.\n   *\n   * Creates a subclass of {@link @tapjs/test!index.Test} which has the\n   * specified plugin, and which applies the plugin to all child tests it\n   * creates.\n   *\n   * Typically, it's best to load plugins using configuration, set via the\n   * `tap plugin <add|rm>` command.\n   *\n   * However, in some cases, for example while developing plugins or if a\n   * certain plugin is only needed in a small number of tests, it can be\n   * useful to apply it after the fact.\n   *\n   * This is best used sparingly, as it may result in poor typescript\n   * compilation performance, which can manifest in slower test start-up times\n   * and lag loading autocomplete in editors. If you find yourself calling\n   * applyPlugin often, consider whether it'd be better to just add the plugin\n   * to the entire test suite, so that it can be built up front.\n   *\n   * @group Plugin Management\n   */\n  applyPlugin<B extends Object, O extends unknown = unknown>(\n    plugin: TapPlugin<B, O>,\n  ): Test<Ext & B, Opts & O> & Ext & B {\n    if (this.printedOutput) {\n      throw new Error(\n        'Plugins must be applied prior to any test output',\n      )\n    }\n\n    if (this.#pluginSet.includes(plugin as TapPlugin<B, Opts>)) {\n      throw new Error('Plugin already applied')\n    }\n\n    type ExtExt = Ext & B\n    type ExtOpts = Opts & O\n    const p = plugin as TapPlugin<B, ExtOpts>\n    const pluginSetExtended: TapPlugin<any, ExtOpts>[] = (\n      this.#pluginSet as TapPlugin<any, ExtOpts>[]\n    ).concat([p])\n    const extended = this as unknown as Test<ExtExt, ExtOpts> & ExtExt\n    class TestExtended extends Test<ExtExt, ExtOpts> {\n      constructor(\n        opts: ExtOpts,\n        __INTERNAL: PluginExtensionOption<ExtExt, ExtOpts> = {\n          [kPluginSet]: pluginSetExtended,\n          [kClass]: TestExtended,\n        },\n      ) {\n        super(opts, __INTERNAL)\n      }\n    }\n    extended.#pluginSet = pluginSetExtended\n    extended.#Class = TestExtended\n    Object.defineProperty(TestExtended, 'name', {\n      value: 'Test',\n      configurable: true,\n    })\n    return applyPlugins<ExtExt, ExtOpts>(extended, pluginSetExtended)\n  }\n\n  // NB: this isn't ever actually called, because we add a pluginLoaded\n  // method in the applyPlugins proxy, but it's here to establish the\n  // type interface.\n  /**\n   * Return true if the specified plugin is loaded. Asserts that the\n   * test object in question implements the return value of the plugin.\n   *\n   * @group Plugin Management\n   */\n  pluginLoaded<T extends any = any>(\n    plugin: (t: any, opts?: any) => T,\n  ): this is TestBase & T {\n    plugin\n    return false\n  }\n  /**\n   * Return the set of plugins loaded by this Test\n   *\n   * @group Plugin Management\n   */\n  get plugins(): TapPlugin<any, Opts>[] {\n    return []\n  }\n\n  /**\n   * Create a child Test object and parse its output as a subtest\n   *\n   * @group Subtest Methods\n   */\n  test(\n    name: string,\n    extra: Opts,\n    cb: (t: Test<Ext, Opts> & Ext) => any,\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  test(\n    name: string,\n    cb: (t: Test<Ext, Opts> & Ext) => any,\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  test(\n    extra: Opts,\n    cb: (t: Test<Ext, Opts> & Ext) => any,\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  test(\n    cb: (t: Test<Ext, Opts> & Ext) => any,\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  test(\n    ...args: TestArgs<Test<Ext, Opts> & Ext, Opts>\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext> {\n    const extra = parseTestArgs<Test<Ext, Opts> & Ext, Opts>(...args)\n    return this.sub(\n      this.#Class,\n      extra,\n      this.test,\n    ) as PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  }\n\n  /**\n   * Create a subtest which is marked as `todo`\n   *\n   * @group Subtest Methods\n   */\n  todo(\n    name: string,\n    extra: Opts,\n    cb: (t: Test<Ext, Opts> & Ext) => any,\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  todo(\n    name: string,\n    cb: (t: Test<Ext, Opts> & Ext) => any,\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  todo(\n    extra: Opts,\n    cb: (t: Test<Ext, Opts> & Ext) => any,\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  todo(\n    cb: (t: Test<Ext, Opts> & Ext) => any,\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  todo(\n    ...args: TestArgs<Test<Ext, Opts> & Ext, Opts>\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext> {\n    const extra = parseTestArgs<Test<Ext, Opts> & Ext, Opts>(...args)\n    extra.todo = true\n    return this.sub(\n      this.#Class,\n      extra,\n      this.todo,\n    ) as PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  }\n\n  /**\n   * Create a subtest which is marked as `skip`\n   *\n   * @group Subtest Methods\n   */\n  skip(\n    name: string,\n    extra: Opts,\n    cb: (t: Test<Ext, Opts> & Ext) => any,\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  skip(\n    name: string,\n    cb: (t: Test<Ext, Opts> & Ext) => any,\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  skip(\n    extra: Opts,\n    cb: (t: Test<Ext, Opts> & Ext) => any,\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  skip(\n    cb: (t: Test<Ext, Opts> & Ext) => any,\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  skip(\n    ...args: TestArgs<Test<Ext, Opts> & Ext, Opts>\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext> {\n    const extra = parseTestArgs<Test<Ext, Opts> & Ext, Opts>(...args)\n    extra.skip = true\n    return this.sub(\n      this.#Class,\n      extra,\n      this.skip,\n    ) as PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  }\n}\n"]}